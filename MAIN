int main()
{
    FILE *fp = NULL;
    char filename[100], filename_copy[50];
    int op = 1, op_sat = 1;
    int in_or_not = 1;
    SNode S;
    time_t start_t=0,end_t=0;
    S.clause_num = 0;
    S.bignode.headnode.nextL = NULL;
    S.bignode.headnode.data = 0;
    S.bignode.letter_num = 0;
    S.bignode.nextC = NULL; //指向第一个C
    while (op)
    {
        system("cls");
        printf("\n               Menu for SuDoku or SAT              \n");
        printf("------------------------------------------------------\n");
        printf("            1.SAT                  2.SuDoKu           \n");
        printf("            0.Exit                                    \n");
        printf("------------------------------------------------------\n");
        if (scanf("%d", &op))
        {
            switch (op)
            {
            case 1:
                while (1)
                {
                    system("cls");
                    printf("\n              Menu for SAT                \n");
                    printf("-------------------------------------------\n");
                    printf("     1.ReadCnfFile           2.TraverseCnf  \n");
                    printf("     3.SaveCnfFile           4.DPLLL        \n");
                    printf("     0.Exit                                   \n");
                    printf("--------------------------------------------\n");
                    if (scanf("%d", &op_sat))
                        switch (op_sat)
                        {
                        case 1:
                            printf("input filename:");
                            scanf("%s", filename);
                            strcpy(filename_copy, filename);
                            Release_Link(&S);
                            in_or_not = 0;
                            if (ReadFile(&S, filename) == TRUE)
                            {
                                printf("cnf文件读取成功!\n");
                                in_or_not = 1;
                            }
                            else
                                printf("cnf文件读取失败!\n");
                            getchar();
                            getchar();
                            break;
                        case 2:
                            if (in_or_not == 1)
                            {
                                Traverse(S);
                                printf("cnf文件输出成功!\n");
                            }
                            else
                                printf("cnf文件输出失败!\n");
                            getchar();
                            getchar();
                            break;
                        case 3:
                            printf("input target filename:");
                            scanf("%s", filename);
                            if (SaveCnfFile(S, filename) == TRUE)
                                printf("cnf文件已保存!\n");
                            else
                                printf("cnf文件保存失败!\n");
                            getchar();
                            getchar();
                            break;
                        case 4:
                            printf("即将启动DPLL算法解决子句集S的SAT问题\n");
                            start_t=clock();
                            if (DPLL(&S, 0, 0))
                                printf("子句集S代表的cnf公式可满足\n");
                            else
                                printf("子句集代表的cnf公式不可满足\n");
                            end_t=clock();
                            printf("所花费的时间time=%.5lfs\n",(end_t-start_t)*0.00432);
                            getchar();
                            getchar();
                            break;
                        }
                }
                break;
            }
        }
    }
    return 0;
}
